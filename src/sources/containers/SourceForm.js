import React, {PropTypes} from 'react';
import {withRouter} from 'react-router';
import {getSource, createSource, updateSource} from 'shared/apis';

// TODO: Add default checkbox
// TODO: wire up default checkbox

// TODO: loading spinner while waiting for edit page to load.
// TODO: populate Kapacitor dropdown

export const SourceForm = React.createClass({
  propTypes: {
    params: PropTypes.shape({
      id: PropTypes.string,
    }),
    router: PropTypes.shape({
      push: PropTypes.func.isRequired,
    }).isRequired,
    location: PropTypes.shape({
      query: PropTypes.shape({
        redirectPath: PropTypes.string,
      }).isRequired,
    }).isRequired,
  },

  getInitialState() {
    return {
      source: {},
      editMode: this.props.params.id !== undefined,
    };
  },

  componentDidMount() {
    if (!this.state.editMode) {
      return;
    }
    getSource(this.props.params.id).then(({data: source}) => {
      this.setState({source});
    });
  },

  handleSubmit(e) {
    e.preventDefault();
    const {router} = this.props;
    const newSource = Object.assign({}, this.state.source, {
      url: this.sourceURL.value,
      name: this.sourceName.value,
      username: this.sourceUsername.value,
      password: this.sourcePassword.value,
      'default': true,
    });
    if (this.state.editMode) {
      updateSource(newSource).then(() => {
        // TODO: use the source.id that comes back from the server, when goller's PR gets merged and the autogenerated code gets banished!
        router.push(`/sources/${1}/manage-sources`);
      });
    } else {
      createSource(newSource).then(() => {
        // TODO: use the source.id that comes back from the server, when goller's PR gets merged and the autogenerated code gets banished!
        router.push(`/sources/${1}/manage-sources`);
      });
    }
  },

  onInputChange(e) {
    const val = e.target.value;
    const name = e.target.name;
    this.setState((prevState) => {
      const newSource = Object.assign({}, prevState.source, {
        [name]: val,
      });
      return Object.assign({}, prevState, {source: newSource});
    });
  },

  render() {
    const {source, editMode} = this.state;

    return (
      <div id="source-form-page">
        <div className="enterprise-header">
          <div className="enterprise-header__container">
            <div className="enterprise-header__left">
              <h1>
                Source Form
              </h1>
            </div>
          </div>
        </div>
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-md-offset-2">
              <div className="panel panel-summer">
                <div className="panel-body">
                  <h4 className="text-center">{editMode ? "Update Existing Source" : "Connect to a New Source"}</h4>
                  <br/>

                  <form onSubmit={this.handleSubmit}>
                    <div>
                      <div className="form-group col-xs-6 col-sm-4 col-sm-offset-2">
                        <label htmlFor="connect-string">Connection String</label>
                        <input type="text" name="url" ref={(r) => this.sourceURL = r} className="form-control" id="connect-string" placeholder="http://localhost:8086" onChange={this.onInputChange} value={source.url || ''}></input>
                      </div>
                      <div className="form-group col-xs-6 col-sm-4">
                        <label htmlFor="name">Name</label>
                        <input type="text" name="name" ref={(r) => this.sourceName = r} className="form-control" id="name" placeholder="Influx 1" onChange={this.onInputChange} value={source.name || ''}></input>
                      </div>
                      <div className="form-group col-xs-6 col-sm-4 col-sm-offset-2">
                        <label htmlFor="username">Username</label>
                        <input type="text" name="username" ref={(r) => this.sourceUsername = r} className="form-control" id="username" onChange={this.onInputChange} value={source.username || ''}></input>
                      </div>
                      <div className="form-group col-xs-6 col-sm-4">
                        <label htmlFor="password">Password</label>
                        <input type="password" name="password" ref={(r) => this.sourcePassword = r} className="form-control" id="password" onChange={this.onInputChange} value={source.password || ''}></input>
                      </div>
                      <div className="form-group col-xs-6 col-sm-4 col-sm-offset-2">
                        <label htmlFor="database">Database</label>
                        <input type="text" name="telegraf" ref={(r) => this.sourceDatabase = r} className="form-control" id="database" placeholder="telegraf" onChange={this.onInputChange} value={source.database || ''}></input>
                      </div>
                      <div className="form-group col-xs-6 col-sm-4">
                        <label htmlFor="kapacitor">Kapacitor</label>
                        <select name="kapacitor" ref={(r) => this.sourceKapacitor = r} className="form-control" id="kapacitor">
                          <option>Foo</option>
                          <option>Bar</option>
                          <option>Baz</option>
                        </select>
                      </div>
                    </div>

                    <div className="form-group col-xs-12 text-center">
                      <button className="btn btn-success" type="submit">{editMode ? "Update" : "Create"}</button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  },
});
export default withRouter(SourceForm);
